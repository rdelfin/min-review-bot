name: Release

on:
  workflow_dispatch:
    inputs:
      bumpLevel:
        description: 'Version Bump Level'
        required: true
        default: 'patch'
        type: choice
        options:
        - major
        - minor
        - patch

env:
  CARGO_TERM_COLOR: always

jobs:
  verify_build:
    name: Verify build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Ensure branch is 'main'
        run: |
          git fetch origin &> /dev/null
          branch="$(git rev-parse --abbrev-ref HEAD)"
          if [[ "${branch}" != "main" ]]; then
            echo "The release branch must be main. Got '${branch}'' instead." >&2
            exit 1
          else
            echo "Branch is '${branch}'"
          fi
      - name: Generate SQLite DB
        run: sqlite3 test.db < sql/create.sql
      - name: Build
        run: cargo build --verbose
      - name: Run tests
        run: cargo test --verbose
      - name: Run clippy
        run: cargo clippy --verbose

  bump_version:
    name: Bump version
    runs-on: ubuntu-latest
    needs: verify_build
    outputs:
      version: ${{ steps.check_version.outputs.version }}
      tag: ${{ steps.check_version.outputs.tag }}
      commit: ${{ steps.check_version.outputs.commit }}
    steps:
      - uses: actions/checkout@v3
      - name: Install tq
        run: |
          wget https://github.com/4rbor/tq/releases/download/0.1.4-75/tq-lin.tar.gz -O - | tar -xz
          mv tq /usr/local/bin

      - run: |
          echo "Bumping to level: $BUMP_LEVEL"
        env:
          BUMP_LEVEL: ${{ inputs.bumpLevel }}
      - name: Install python requirements
        run: |
          echo "PWD: ${PWD}" && ls && pip3 install -r requirements.txt

      - name: Bump appropriate version
        run: python3 new_version.py ${{ inputs.bumpLevel }}

      - name: Show diff
        run: git diff

      - name: Compute version and ensure release does not already exist
        id: check_version
        run: |
          VERSION=$(tq -f Cargo.toml .package.version | sed 's/^.\(.*\).$/\1/')
          TAG="v${VERSION}"
          COMMIT=$(git rev-parse HEAD)
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "commit=${COMMIT}" >> $GITHUB_OUTPUT
          git fetch origin &> /dev/null
          if [[ -n "$(git tag -l ${TAG})" ]]; then
            echo "A release '${TAG}' already exists." >&2
            exit 1
          else
            echo "Tag '${TAG}' will be created on successful deploy"
          fi

      - name: Configure git
        run: |
          git config --global user.name 'Ricardo Delfin'
          git config --global user.email 'rdelfin@users.noreply.github.com'

      - name: Commit version
        run: |
          git commit -am "${{ inputs.bumpLevel }} version bump"

      - name: Push new version
        run: |
          git push

  docker_build:
    name: Build docker container
    runs-on: ubuntu-latest
    needs: bump_version
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ needs.bump_version.outputs.commit }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          push: true
          platforms: linux/amd64,linux/arm64
          tags: rdelfin/min_review_bot:${{ needs.bump_version.outputs.tag }} , rdelfin/min_review_bot:latest

  github_release:
    name: Generate Github release
    runs-on: ubuntu-latest
    needs: [bump_version, docker_build]
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ needs.bump_version.outputs.commit }}

      - name: Generate release notes
        run: |
          # Generate the release notes
          sed 's/{version}/${{ env.VERSION }}/g' ${{ github.workspace }}/.github/release_notes.template \
          > ${{ github.workspace }}/.github/release_notes.txt
        env:
          VERSION: ${{ needs.bump_version.outputs.version }}

      - name: Create release
        uses: softprops/action-gh-release@v1
        id: rules_rust_release
        env:
          GIT_TAG: ${{ needs.bump_version.outputs.tag }}
          COMMIT: ${{ needs.bump_version.outputs.commit }}
        with:
          generate_release_notes: true
          tag_name: ${{ env.GIT_TAG }}
          body_path: ${{ github.workspace }}/.github/release_notes.txt
          target_commitish: ${{ env.COMMIT }}
